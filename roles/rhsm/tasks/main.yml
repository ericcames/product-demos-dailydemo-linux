---
- name: Registering system with Satellite
  tags:
    - always
  block:

    # fail with good error for Automation controller user
    - name: Determine that the Satellite credential is set
      ansible.builtin.assert:
        that:
          - "lookup('ansible.builtin.env', 'SAT_USERNAME') !=''"
          - "lookup('ansible.builtin.env', 'SAT_HOST') !=''"
          - "lookup('ansible.builtin.env', 'SAT_PASSWORD') !=''"
        fail_msg:
          - "Red Hat Satellite 6 credential is not set"
          - "Please assign correct credentials to the Job Template"

- name: Registering system with Satellite
  tags:
    - create
  block:

    # Gather the start time to use in a later playbook
    - name: Record the subscription_time
      delegate_to: 127.0.0.1
      register: subscription_time_pre
      changed_when: false
      ansible.builtin.command:
        cmd: "date '+%H:%M:%S'"

    # Make the start time available to other playbooks
    - name: Capture the subscription_time
      ansible.builtin.set_stats:
        data:
          rhsm_subscription_time: "{{ subscription_time_pre.stdout }}"

    - name: Setting the hostname to the public hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Remove the rh-amazon-rhui-client rpm
      ansible.builtin.dnf:
        name: rh-amazon-rhui-client
        state: removed

    - name: Enable the rhsm repo
      changed_when: false
      ansible.builtin.shell:
        cmd: set -o pipefail && subscription-manager config --rhsm.manage_repos=1
        executable: /bin/bash

    - name: Installing katello-ca-consumer-latest.noarch.rpm from Satellite server
      ansible.builtin.dnf:
        name: http://{{ rhsm_sat6_fqdn }}/pub/katello-ca-consumer-latest.noarch.rpm
        state: present
        disable_gpg_check: true

    - name: Generate registration command
      register: command
      redhat.satellite.registration_command:
        server_url: "{{ lookup('ansible.builtin.env', 'SAT_HOST') }}"
        username: "{{ lookup('ansible.builtin.env', 'SAT_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'SAT_PASSWORD') }}"
        activation_keys: "{{ rhsm_activation_key }}"
        organization: "{{ rhsm_org_id }}"
        update_packages: false
        hostgroup: Webservers
        setup_insights: true
        setup_remote_execution_pull: true
        force: true
        insecure: true
        validate_certs: false
        jwt_expiration: 1

    - name: Register client to Satellite
      register: result
      changed_when: result.rc == 1
      failed_when: result.rc > 1
      ansible.builtin.shell:
        cmd: "{{ command.registration_command }}"

    # - name: Installing Satellite key for remote execution
    #   ansible.posix.authorized_key:
    #     user: ec2-user
    #     key: "{{ lookup('url', 'https://{{ rhsm_sat6_fqdn}}:9090/ssh/pubkey', validate_certs=False, split_lines=False) }}"
    #     state: present

- name: Un-Registering system from Satellite and Insights
  tags:
    - remove
  block:

    - name: UN-Register server from Red Hat Insights
      register: result
      changed_when: result.rc == 1
      failed_when: result.rc > 1
      ansible.builtin.command: insights-client --unregister

    - name: UN-Register the system from Satellite
      community.general.redhat_subscription:
        state: absent
        org_id: "{{ rhsm_org_id }}"
        activationkey: "{{ rhsm_activation_key }}"
        consumer_name: "{{ inventory_hostname }}"
